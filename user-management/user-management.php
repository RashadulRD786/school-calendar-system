<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Admin Dashboard - User Management</title>
  <link href="https://fonts.googleapis.com/css2?family=Wix+Madefor+Display&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="user-management.css" />
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
  .modal-overlay {
  position: fixed;
  top: 0; left: 0;
  width: 100vw; height: 100vh;
  background: rgba(0, 0, 0, 0.6);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 9999;
}

.modal-card {
  background: #fff;
  padding: 20px 30px;
  border-radius: 10px;
  position: relative;
  width: 320px;
  text-align: center;
}

.modal-close {
  position: absolute;
  top: 10px;
  right: 15px;
  font-size: 20px;
  border: none;
  background: transparent;
  cursor: pointer;
}

.modal-actions {
  margin-top: 20px;
  display: flex;
  justify-content: center;
  gap: 10px;
}

.btn-confirm {
  background-color: #28a745;
  color: white;
  padding: 10px 16px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.btn-cancel {
  background-color: #dc3545;
  color: white;
  padding: 10px 16px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

/* Styles for the Notification Container */
.notification-container {
    position: relative; /* Added for dropdown positioning */
    display: flex;
    align-items: center;
}

.notification-button {
    position: relative;
    background: none;
    border: none;
    cursor: pointer;
    padding: 8px;
    border-radius: 50%;
    transition: background-color 0.2s;
}

.notification-button:hover {
    background-color: #f5f5f5;
}

.notification-icon {
    width: 28px;
    height: 28px;
}

.notification-dropdown {
    position: absolute;
    top: 100%; /* Positions it below the button */
    right: 0px; /* Aligns to the right of the button */
    width: 300px;
    background-color: #fff;
    border: 1px solid #e8e8e8;
    border-radius: 4px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    padding: 16px;
    z-index: 10;
}

.notification-title {
    font-size: 16px;
    font-weight: 500;
    margin-bottom: 12px;
}

.notification-message {
    font-size: 14px;
    color: #666;
}

/* Styles for the View Event Modal */
.modal.view-event-modal {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 80%;
    max-width: 500px;
    max-height: 90vh;
    overflow-y: auto;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    padding: 20px;
    z-index: 1000; /* Ensure it's above other content */
}

/* Title consistency for modals */
.view-event-modal .modal-title {
    margin-bottom: 16px;
    font-size: 20px;
    font-weight: 500;
    color: #333;
    text-align: left;
}

/* Close button position for modals */
.view-event-modal .close-modal-button {
    position: absolute;
    top: 16px;
    right: 16px;
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #666;
}

.close-modal-button:hover {
    color: #333;
}

/* Form structure within modals */
.view-event-modal .form-container {
    display: flex;
    flex-direction: column;
    gap: 12px;
}

.form-row {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 12px;
}

.form-label {
    display: block;
    margin-bottom: 6px;
    color: #555;
    font-size: 14px;
}

.form-input {
    width: 100%;
    padding: 8px 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 15px;
}

.form-input:focus {
    border-color: #008080; /* Teal */
    outline: none;
}

.form-input[readonly] {
    background-color: #f9f9f9;
    color: #333;
    cursor: default;
}

.tag {
  display: inline-block;
  background: #20B2AA; /* Changed from #e0e7ff (Light Blue) to Teal */
  color: #FFFFFF; /* Changed from #3730a3 to White */
  border-radius: 12px;
  padding: 2px 10px;
  margin: 2px 2px 2px 0;
  font-size: 0.95em;
}
.tag-na {
  background: #f3f4f6;
  color: #6b7280;
}

/* Important: Hide elements marked with 'hidden' attribute */
[hidden] {
    display: none !important;
}

.hidden {
  display: none;
}


/* Note: The styling for individual notification cards inside the dropdown
   (e.g., background, font-weight, padding, box-shadow) is dynamically
   generated by JavaScript. You'll find these as inline styles in the JS section. */


</style>
</head>
<body>
  <div class="dashboard-container">
    <header class="dashboard-header">
      <div class="header-left">
        <div class="logo-container">
          <img src="../SMKLOGO.png" alt="EventFlow Logo" class="logo-image" />
        </div>
        <div class="header-text">
          <h1 class="company-name">SK SAUJANA UTAMA</h1>
          <p class="company-tagline">Event Management System</p>
        </div>
      </div>
      <div class="welcome-message">Welcome  Admin 👋</div>
      <div class="notification-container">
    <button class="notification-button" data-el="button-1">
        <svg viewBox="0 0 53 58" fill="none" class="notification-icon">
            <rect width="53" height="57" fill="none"></rect>
            <path
                d="M5.58695 34.1858C5.11735 37.3994 7.21688 39.6297 9.78749 40.7412C19.6427 45.0029 33.3574 45.0029 43.2125 40.7412C45.7832 39.6297 47.8827 37.3994 47.4132 34.1858C47.1246 32.2109 45.6975 30.5665 44.6402 28.9608C43.2553 26.8316 43.1178 24.5093 43.1175 22.0386C43.1175 12.4904 35.6777 4.75 26.5 4.75C17.3225 4.75 9.88262 12.4904 9.88262 22.0386C9.8824 24.5093 9.7448 26.8316 8.35993 28.9608C7.30265 30.5665 5.87556 32.2109 5.58695 34.1858Z"
                stroke="#FFFFFF"
                stroke-width="3"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
            <path
                d="M19.875 53.4375C21.6331 54.9145 23.9549 55.8125 26.5 55.8125C29.0451 55.8125 31.3669 54.9145 33.125 53.4375"
                stroke="#FFFFFF"
                stroke-width="3"
                stroke-linecap="round"
                stroke-linejoin="round"
            ></path>
        </svg>
        <span id="notification-badge" style="position:absolute;top:2px;right:2px;background:#ed1c24;color:#fff;font-size:13px;font-weight:600;padding:2px 7px;border-radius:12px;display:none;z-index:11;"></span>
        <div class="notification-dropdown" data-el="div-1" hidden>
            <h3 class="notification-title">Notifications</h3>
            <p class="notification-message">No new notifications</p>
        </div>
    </button>
</div>
    </header>

    <div class="modal view-event-modal" id="view-event-modal" hidden>
    <button class="close-modal-button" id="view-close-button">&times;</button>
    <h2 class="modal-title">Event Details</h2>
    <div class="form-container">
        <div class="form-group">
            <label for="view-name" class="form-label">Event Name</label>
            <input type="text" id="view-name" class="form-input" readonly>
        </div>
        <div class="form-row">
            <div class="form-group">
                <label for="view-date" class="form-label">Day</label>
                <input type="text" id="view-day" class="form-input" readonly>
            </div>
            <div class="form-group">
                <label for="view-day" class="form-label">Date</label>
                <input type="date" id="view-date" class="form-input" readonly>
            </div>
            <div class="form-group">
                <label for="view-time" class="form-label">Time</label>
                <input type="text" id="view-time" class="form-input" readonly>
            </div>
        </div>
        <div class="form-group">
            <label for="view-location" class="form-label">Location</label>
            <input type="text" id="view-location" class="form-input" readonly>
        </div>
        <div class="form-group">
            <label for="view-involvement" class="form-label">Involvement</label>
            <div id="view-involvement" class="form-input" style="min-height:2em;"></div>
        </div>
        <div class="form-group">
            <label for="view-person" class="form-label">Person in Charge</label>
            <input type="text" id="view-person" class="form-input" readonly>
        </div>
        <div class="form-group">
            <label for="view-unit" class="form-label">Unit</label>
            <input type="text" id="view-unit" class="form-input" readonly>
        </div>
        <div class="form-group">
            <label for="view-status" class="form-label">Status</label>
            <input type="text" id="view-status" class="form-input" readonly>
        </div>
    </div>
</div>

    <div class="dashboard-content">
      <nav class="sidebar">
        <div class="nav-links">
          <a href="../admin-dashboard1.html" class="nav-button dashboard-btn">Dashboard</a>
           
          <a href="../report.html" class="nav-button reports-btn">Reports</a>
          <a href="../delete_events.html" class="nav-button reports-btn">Delete Events</a>
          <a href="user-management.php" class="nav-button users-btn active">Admin</a>
        </div>
        <a href="../index.html" class="logout-button">
          <svg viewBox="0 0 24 24" width="20" height="20" fill="none">
            <path d="M16 17L21 12L16 7" stroke="#ec4547" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
            <path d="M21 12H9" stroke="#ec4547" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
            <path d="M12 19H5C3.89543 19 3 18.1046 3 17V7C3 5.89543 3.89543 5 5 5H12" stroke="#ec4547" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
          </svg>
          <span>Logout</span>
</a>
        
      </nav>

      <main class="main-content">
        <h2 class="page-title">All Users</h2><br><br>
        <div class="content-header1">
          <button id="addUserBtn" class="add-user-button" onclick="window.location.href='add-user1.html'">
            <span class="plus-icon">+</span>
            <span>Add User</span>
          </button>          
        </div>

        


        <div class="users-table-wrapper">
          <div class="table-header">
            <div class="header-cell email">Email</div>
            <div class="header-cell actions">Actions</div>
          </div>

          <?php
          $host = 'localhost';
          $username = 'root';
          $password = '';
          $database = 'school_system';
          $conn = new mysqli($host, $username, $password, $database,3307);
          if ($conn->connect_error) {
              die("Connection failed: " . $conn->connect_error);
          }
          $result = $conn->query("SELECT * FROM users");
          while ($row = $result->fetch_assoc()):
          ?>
            <div class="table-row">
              <div class="cell email"><?= htmlspecialchars($row['email']) ?></div>
              <div class="cell actions">
                <button class="edit-button" onclick="editUser(<?= $row['id'] ?>, '<?= htmlspecialchars($row['email']) ?>', '<?= htmlspecialchars($row['role']) ?>','<?= htmlspecialchars($row['name']) ?>')">Edit</button>
                <button class="delete-button" onclick="confirmDelete(<?= $row['id'] ?>)">Delete</button>

              </div>
            </div>
          <?php endwhile; $conn->close(); ?>
        </div>
      </main>
    </div>
  </div>

  <script>
    const state = {
 notifications: false,

};

function onButton1Click(event) {
 
  state.notifications = !state.notifications;
  
  updateNotificationVisibility(); 
}


function onDiv1Click(event) {
  event.stopPropagation(); 
  state.notifications = false; 
  updateNotificationVisibility(); 
}


function setupNotificationListeners() {
  
  document.querySelectorAll("[data-el='button-1']").forEach((el) => {
    
    el.removeEventListener("click", onButton1Click);
    el.addEventListener("click", onButton1Click);
  });

 
  document.querySelectorAll("[data-el='div-1']").forEach((el) => {
    el.removeEventListener("click", onDiv1Click);
    el.addEventListener("click", onDiv1Click);
  });
}


function updateNotificationVisibility() {
  document.querySelectorAll("[data-el='div-1']").forEach((el) => {
    el.hidden = !state.notifications; 
  });
}


document.addEventListener("click", function (event) {
  const notificationButton = document.querySelector("[data-el='button-1']");
  const notificationDropdown = document.querySelector("[data-el='div-1']");

  
  if (state.notifications && notificationButton && notificationDropdown &&
      !notificationButton.contains(event.target) && !notificationDropdown.contains(event.target)) {
    state.notifications = false;
    updateNotificationVisibility();
  }
});


document.addEventListener("DOMContentLoaded", () => {


  setupNotificationListeners();
  updateNotificationVisibility(); 
});


    // Function to handle Edit
   function editUser(userId, userEmail, userRole,userName) {
      // Redirect to edit-user.html with query parameters
      window.location.href = `edit-user.html?id=${userId}&email=${encodeURIComponent(userEmail)}&name=${encodeURIComponent(userName)}&role=${encodeURIComponent(userRole)}`;
    }

  // Show modal and set user ID
let selectedUserId = null;

function confirmDelete(userId) {
  selectedUserId = userId;
  document.getElementById('deleteUserId').value = userId;
  document.getElementById('deleteConfirmationModal').classList.remove('hidden');
}



// Cancel or close modal
window.addEventListener('DOMContentLoaded', () => {
    const cancelBtn = document.getElementById('cancelDeleteBtn');
    const closeBtn = document.getElementById('closeDeleteModal');

    if (cancelBtn) {
      cancelBtn.addEventListener('click', closeModal);
    }

    if (closeBtn) {
      closeBtn.addEventListener('click', closeModal);
    }
  });
  
function closeModal() {
  document.getElementById('deleteConfirmationModal').classList.add('hidden');
  selectedUserId = null;
}


    // --- Notification Dropdown Toggle Logic ---
    // This part handles showing/hiding the notification dropdown when the bell icon is clicked.
    document.querySelector('.notification-button').addEventListener('click', function(event) {
        const dropdown = document.querySelector('.notification-dropdown');
        dropdown.hidden = !dropdown.hidden;
        event.stopPropagation(); // Prevent immediate closing from window click listener
    });

    // Close dropdown if clicked anywhere outside the notification container
    document.addEventListener('click', function(event) {
        const notificationContainer = document.querySelector('.notification-container');
        const dropdown = document.querySelector('.notification-dropdown');
        if (!notificationContainer.contains(event.target) && !dropdown.hidden) {
            dropdown.hidden = true;
        }
    });


    // --- Event Detail Modal Logic (#view-event-modal) ---
    let currentEventId = null; // To keep track of the event ID being viewed

    // Function to fetch and display event details in the new modal
    function viewEventDetails(eventId) {
        fetch('../get_event_by_id.php?id=' + eventId) // Fetches event data from PHP
            .then(res => {
                if (!res.ok) {
                    // If the HTTP response status is not 2xx (e.g., 404, 500)
                    // Throw an error with the status for the catch block to handle
                    throw new Error(`HTTP error! Status: ${res.status}`);
                }
                return res.json(); // Attempt to parse the response as JSON
            })
            .then(eventDataArray => { // CHANGED: Renamed parameter from 'event' to 'eventDataArray'
                console.log('Event data received (raw array):', eventDataArray);

                // Check if the event data is valid and contains expected data (assuming it's an array)
                if (!eventDataArray || !Array.isArray(eventDataArray) || eventDataArray.length === 0) {
                    console.warn('Received empty or invalid event data for ID:', eventId);
                    alert('⚠️ Event details not found for this notification. It might have been deleted.');
                    document.getElementById('view-event-modal').hidden = true; // Hide modal if no data
                    return; // Stop execution here
                }

                // EXTRACT THE SINGLE EVENT OBJECT:
                const singleEvent = eventDataArray[0]; // CHANGED: Renamed variable from 'event' to 'singleEvent'
                console.log('Processed event object:', singleEvent);

                currentEventId = eventId;

                // Populate the fields of the NEW modal (#view-event-modal)
                // Use 'singleEvent' to access properties
                document.getElementById('view-name').value = singleEvent.name || '';
                document.getElementById('view-day').value = singleEvent.day || '';
                document.getElementById('view-date').value = singleEvent.date || '';
                const formattedTime = formatTimeWithAMPM(singleEvent.time || singleEvent.startTime);
                document.getElementById("view-time").value = formattedTime;
                document.getElementById('view-location').value = singleEvent.location || '';

                document.getElementById('view-person').value = singleEvent.person_in_charge || '';
                document.getElementById('view-unit').value = singleEvent.unit || '';
                document.getElementById('view-status').value = singleEvent.status || '';

                // This part for involvement is correct for a DIV and should remain:
                const involvementContainer = document.getElementById('view-involvement');
                // Check if element exists before manipulating
                if (involvementContainer) {
                    const involvementArr = (singleEvent.involvement || '').split(',').filter(Boolean);
                    involvementContainer.innerHTML = involvementArr.length
                        ? involvementArr.map(name => `<span class="tag">${name.trim()}</span>`).join(' ')
                        : '<span class="tag tag-na">N/A</span>';
                } else {
                    console.warn('Element with ID "view-involvement" not found in the DOM.');
                }

                document.getElementById('view-event-modal').hidden = false;
            })
            .catch(err => {
                // This catch block will now capture errors from network issues AND JSON parsing errors
                console.error('Error fetching or processing event details for ID', eventId, ':', err);

                let errorMessage = '❌ Failed to load event details. ';

                if (err instanceof TypeError && err.message.includes('JSON')) {
                    errorMessage += 'Invalid data received from server. Check get_events.php output.';
                } else if (err.message.startsWith('HTTP error!')) {
                    errorMessage += `Server responded with an error: ${err.message}.`;
                } else {
                    errorMessage += 'Please check the browser console for more information.';
                }
                alert(errorMessage); // Show a user-friendly alert
                document.getElementById('view-event-modal').hidden = true; // Ensure modal is hidden on error
            });
    }

    // Helper function for time formatting
    function formatTimeWithAMPM(timeStr) {
        if (!timeStr) return "N/A";
        const [hours, minutes] = timeStr.split(":").map(Number);
        const ampm = hours >= 12 ? "PM" : "AM";
        const adjustedHour = hours % 12 || 12;
        return `${adjustedHour}:${minutes.toString().padStart(2, "0")} ${ampm}`;
    }

    // Close the NEW modal when 'x' is clicked
    document.getElementById('view-close-button').onclick = function() {
        document.getElementById('view-event-modal').hidden = true;
    };

    // Close the NEW modal when clicking anywhere outside of it
    window.onclick = function(event) {
        const modal = document.getElementById('view-event-modal');
        if (event.target === modal) {
            modal.hidden = true;
        }
    };


    // --- Notification Badge and Dropdown Population Logic ---

    // Function to update the unread notification count badge
    function updateNotificationBadge(count) {
        const badge = document.getElementById('notification-badge');
        if (count > 0) {
            badge.textContent = count;
            badge.style.display = 'inline-block';
        } else {
            badge.style.display = 'none';
        }
    }

    // Main function to fetch and display notifications
    function fetchNotifications() {
        fetch('../get_notifications.php') // Fetches notification data from PHP
            .then(res => res.json())
            .then(data => {
                const dropdown = document.querySelector('[data-el="div-1"]');
                const badgeCount = data.unread_count || 0;
                updateNotificationBadge(badgeCount); // Update the badge

                let scrollableDiv = dropdown.querySelector('.notification-scroll');
                let prevScrollTop = scrollableDiv ? scrollableDiv.scrollTop : 0;

                if (data.notifications && data.notifications.length > 0) {
                    // Construct the HTML for notifications within the dropdown
                    dropdown.innerHTML = `
                        <h3 class="notification-title">Notifications</h3>
                        <div style="margin-bottom:10px;text-align:right;">
                            <button id="mark-read-btn" style="background:#008080;color:white;border:none;padding:6px 14px;border-radius:6px;cursor:pointer;font-size:13px;font-weight:500;">Mark all as read</button>
                        </div>
                        <div class="notification-scroll" style="max-height:320px;overflow-y:auto;">
                            ${data.notifications.map(n => `
                                <div class="notification-card" style="background:${n.read ? '#fff' : '#ECECEC'};font-weight:${n.read ? 'normal' : 'bold'};margin-bottom:10px;padding:13px 14px 10px 14px;border-radius:9px;box-shadow:0 2px 8px rgba(32,178,170,0.10);cursor:pointer;transition:box-shadow 0.2s;display:flex;flex-direction:column;gap:4px;">
                                    <div style="display:flex;justify-content:space-between;align-items:center;">
                                        <span style="text-align:left;color:#008080;font-size:15px;">New event added: ${n.eventName}</span>
                                    </div>
                                    <div style="display:flex;justify-content:flex-end;align-items:center;margin-top:2px;">
                                        <span style="font-size:12px;color:#888;text-align:right;">${n.eventDate} ${n.eventTime}</span>
                                    </div>
                                    <div style="display:flex;justify-content:flex-end;align-items:center;margin-top:2px;">
                                        <button style="background:none;border:none;color:#20B2AA;font-size:13px;cursor:pointer;padding:0;" onclick="viewEventDetails(${n.eventId})">View Details</button>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    `;
                    // Restore scroll position after content update
                    scrollableDiv = dropdown.querySelector('.notification-scroll');
                    if (scrollableDiv) scrollableDiv.scrollTop = prevScrollTop;

                    // Attach event listener for "Mark all as read" button
                    const markBtn = document.getElementById('mark-read-btn');
                    if (markBtn) {
                        markBtn.onclick = function() {
                            fetch('mark_notifications_read.php', { method: 'POST' }) // Request to mark all as read
                                .then(res => res.json())
                                .then(() => fetchNotifications()); // Refresh notifications after marking
                        };
                    }
                } else {
                    // Display "No new notifications" if there are none
                    dropdown.innerHTML = '<h3 class="notification-title">Notifications</h3><p class="notification-message">No new notifications</p>';
                }
            });
    }

    // --- Background Refresh and Initial Load ---
    // Fetch notifications every 1 second (1000ms)
    setInterval(fetchNotifications, 1000);
    // Fetch notifications when the page initially loads
    document.addEventListener('DOMContentLoaded', fetchNotifications);


</script>

 
<!-- Delete Confirmation Modal -->
<div id="deleteConfirmationModal" class="modal-overlay hidden">
  <div class="modal-card">
    <button class="modal-close" id="closeDeleteModal">&times;</button>
    <p class="modal-title">Are you sure you want to delete this user?</p>
    <div class="modal-actions">
      <form method="POST" action="delete-user.php" id="deleteForm">
        <input type="hidden" name="id" id="deleteUserId" />
        <button type="submit" class="btn-confirm">Confirm</button>
        <button type="button" class="btn-cancel" id="cancelDeleteBtn">Cancel</button>
      </form>
    </div>
  </div>
</div>



</body>
</html>